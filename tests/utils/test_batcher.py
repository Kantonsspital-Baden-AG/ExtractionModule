import pytest

from extraction.utils.batcher import generate_batches


@pytest.fixture(scope="module", params=[3, 5, None, 0])
def batch_size(request):
    """Define the batch size."""
    return request.param


@pytest.fixture(scope="module", params=[5, 10, None, 0])
def limit(request):
    """Define the limit."""
    return request.param


def relevant_rows_number(input_data, limit):
    """Calculate the number of relevant rows.

    Args:
        input_data (DataFrame): The input data.
        limit (int): The limit.

    Returns:
        int: The number of relevant rows.
    """
    data_count = input_data.count()
    if not limit:
        return data_count
    return min(limit, data_count)


def expected_batches_number(input_data, batch_size, limit):
    """Calculate the expected number of batches.

    Args:
        input_data (DataFrame): The input data.
        batch_size (int): The batch size.
        limit (int): The limit.

    Returns:
        int: The expected number of batches.
    """
    data_count = input_data.count()

    if not limit:
        limit = data_count

    relevant_rows = relevant_rows_number(input_data, limit)

    if not batch_size:
        batch_size = data_count

    batch_size = min(batch_size, relevant_rows)

    expected_batches = relevant_rows // batch_size
    if relevant_rows % batch_size:
        expected_batches += 1
    return expected_batches


def test_generate_batches_number_of_batches(input_data, batch_size, limit):
    """Test the number of batches generated by the generate_batches function.

    Args:
        input_data (DataFrame): The input data.
        batch_size (int): The batch size.
        limit (int): The limit.
    """
    batches = list(generate_batches(input_data, batch_size=batch_size, limit=limit))

    msg = "The number of batches is incorrect."
    expected_batches = expected_batches_number(input_data, batch_size, limit)

    assert len(batches) == expected_batches, msg


def test_generate_batches_number_of_rows(input_data, batch_size, limit):
    """Test the number of rows in each batch generated by the generate_batches function.

    Args:
        input_data (DataFrame): The input data.
        batch_size (int): The batch size.
        limit (int): The limit.
    """
    batches = list(generate_batches(input_data, batch_size=batch_size, limit=limit))

    relevant_rows = relevant_rows_number(input_data, limit)
    expected_batches = expected_batches_number(input_data, batch_size, limit)

    if not batch_size:
        batch_size = relevant_rows

    for i in range(expected_batches - 1):
        msg = f"The number of rows in batch {i} is incorrect."
        assert batches[i].count() == batch_size, msg

    expected_rows = (
        relevant_rows % batch_size if relevant_rows % batch_size else batch_size
    )
    msg = "The number of rows in the last batch is incorrect."
    assert batches[-1].count() == expected_rows, msg


def test_generate_batches_columns(input_data, batch_size, limit):
    """Test the columns of each batch generated by the generate_batches function.

    Args:
        input_data (DataFrame): The input data.
        batch_size (int): The batch size.
        limit (int): The limit.
    """
    batches = list(generate_batches(input_data, batch_size=batch_size, limit=limit))

    msg = "The columns are incorrect."
    for i in range(len(batches)):
        assert batches[i].columns == input_data.columns, msg


def test_generate_batches_content(input_data, batch_size, limit):
    """Test the content of each batch generated by the generate_batches function.

    Args:
        input_data (DataFrame): The input data.
        batch_size (int): The batch size.
        limit (int): The limit.
    """
    batches = list(generate_batches(input_data, batch_size=batch_size, limit=limit))

    expected_batches = expected_batches_number(input_data, batch_size, limit)
    relevant_rows = relevant_rows_number(input_data, limit)
    if not batch_size:
        batch_size = relevant_rows

    msg = "The content of the batches is incorrect."

    for i in range(expected_batches - 1):
        data_to_skip = i * batch_size
        data_to_take = batch_size
        assert (
            batches[i].collect()
            == input_data.limit(data_to_skip + data_to_take)
            .subtract(input_data.limit(data_to_skip))
            .collect()
        ), msg

    data_to_skip = (expected_batches - 1) * batch_size
    data_to_take = relevant_rows - data_to_skip
    assert (
        batches[-1].collect()
        == input_data.limit(data_to_skip + data_to_take)
        .subtract(input_data.limit(data_to_skip))
        .collect()
    ), msg
